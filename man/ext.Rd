% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ext.R
\name{ext}
\alias{ext}
\title{Create an external function}
\usage{
ext(.fn, ...)
}
\arguments{
\item{.fn}{An unevaluated function or formula. Formulas are
converted to purrr-like lambda functions using
\code{\link[rlang:as_function]{rlang::as_function()}}.}

\item{...}{Named arguments to import in the environment of \code{.fn}.}
}
\description{
\code{ext()} creates functions in a child of the base environment. These
functions must be self-contained:
\itemize{
\item They should call package functions with an explicit \code{::}
namespace.
\item They should import data they depend on.
}

You can import data in two ways: by supplying named arguments or by
unquoting objects with \code{!!}.
}
\examples{
# Create external functions using the ordinary notation:
ext(function(x) stats::var(x))

# Or the formula notation:
ext(~stats::var(.x))

# Import data by supplying named arguments. You can test you have
# imported all necessary data by calling your external function:
na_rm <- TRUE
fn <- ext(~stats::var(.x, na.rm = na_rm), na_rm = na_rm)
fn(1:10)

# For small data it is handy to unquote instead. Unquoting inlines
# objects inside the function:
fn <- ext(~stats::var(.x, na.rm = !!na_rm))
fn(1:10)
}
