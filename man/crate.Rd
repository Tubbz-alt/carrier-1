% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crate.R
\name{crate}
\alias{crate}
\title{Create a crated function}
\usage{
crate(.fn, ...)
}
\arguments{
\item{.fn}{An unevaluated function or formula. Formulas are
converted to purrr-like lambda functions using
\code{\link[rlang:as_function]{rlang::as_function()}}.}

\item{...}{Named arguments to import in the environment of \code{.fn}.}
}
\description{
\code{crate()} creates functions in a self-contained environment
(technically, a child of the base environment). Consequently these
functions must be self-contained as well:
\itemize{
\item They should call package functions with an explicit \code{::}
namespace.
\item They should import any data they depend on.
}

You can import data by supplying named arguments or by unquoting
objects with \code{!!}.
}
\examples{
# You can create functions using the ordinary notation:
crate(function(x) stats::var(x))

# Or the formula notation:
crate(~stats::var(.x))

# Import data by supplying named arguments. You can test you have
# imported all necessary data by calling your crated function:
na_rm <- TRUE
fn <- crate(~stats::var(.x, na.rm = na_rm), na_rm = na_rm)
fn(1:10)

# For small data it is handy to unquote instead. Unquoting inlines
# objects inside the function:
fn <- crate(~stats::var(.x, na.rm = !!na_rm))
fn(1:10)
}
