% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crate.R
\name{crate}
\alias{crate}
\title{Crate a function to share with another process}
\usage{
crate(.fn, ...)
}
\arguments{
\item{.fn}{A formula or function, unevaluated. Formulas are
converted to purrr-like lambda functions using
\code{\link[rlang:as_function]{rlang::as_function()}}.}

\item{...}{Named arguments to declare in the environment of \code{.fn}.}
}
\description{
\code{crate()} creates functions in a self-contained environment
(technically, a child of the base environment). Consequently these
functions must be self-contained as well:
\itemize{
\item They should call package functions with an explicit \code{::}
namespace.
\item They should declare any data they depend on.
}

You can declare data by supplying named arguments or by unquoting
objects with \code{!!}.
}
\examples{
# You can create functions using the ordinary notation:
crate(function(x) stats::var(x))

# Or the formula notation:
crate(~stats::var(.x))

# Declare data by supplying named arguments. You can test you have
# declared all necessary data by calling your crated function:
na_rm <- TRUE
fn <- crate(~stats::var(.x, na.rm = na_rm))
try(fn(1:10))

fn <- crate(
  ~stats::var(.x, na.rm = na_rm),
  na_rm = na_rm
)
fn(1:10)

# For small data it is handy to unquote instead. Unquoting inlines
# objects inside the function. This is less verbose if your
# function depends on many small objects:
fn <- crate(~stats::var(.x, na.rm = !!na_rm))
fn(1:10)

# One downside is that the individual sizes of unquoted objects
# won't be shown in the crate printout:
fn
}
